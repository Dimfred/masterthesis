import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
import matplotlib as mpl
import math

import seaborn as sns
import pandas as pd
from pathlib import Path

import click

output = Path("imgs")

# plt.clf()

gamma = "\u03b3"


def fsci(f, *p):
    print(f)
    if f == 0.01:
        return "1.0e-2"
    if f == 0.005:
        return "5.0e-3"
    if f == 0.0025:
        return "2.5e-3"
    if f == 0.001:
        return "1.0e-3"
    if f == 0.0005:
        return "5.0e-4"
    if f == 0.00025:
        return "2.5e-4"
    if f == 0.0001:
        return "1.0e-4"

    return None

green = sns.color_palette("Greens_d", 3)[1]
blue = sns.color_palette("Blues_d", 3)[1]


def make_score_tuning_heatmap(results, score_threshs, iou_threshs, size=(11, 11)):
    ylabel, xlabel = "IoU Threshold", "Score Threshold"

    fig = plt.figure(figsize=size)
    ax = sns.heatmap(results[::-1], annot=True, fmt=".5f", square=True)

    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_xticklabels(score_threshs)
    ax.set_yticklabels(iou_threshs[::-1])
    ax.tick_params(axis="y", labelrotation=25)
    plt.tight_layout()


@click.command()
@click.option("--show", is_flag=True, default=False)
@click.option("--yolo_lr", is_flag=True, default=False)
@click.option("--yolo_offline", is_flag=True, default=False)
@click.option("--yolo_online", is_flag=True, default=False)
@click.option("--yolo_grid_all", is_flag=True, default=False)
@click.option("--yolo_grid_heat", is_flag=True, default=False)
@click.option("--yolo_input_size", is_flag=True, default=False)
@click.option("--yolo_diou_heat", is_flag=True, default=False)
@click.option("--yolo_diou_tta_heat", is_flag=True, default=False)
@click.option("--yolo_wbf_heat", is_flag=True, default=False)
@click.option("--yolo_wbf_tta_heat", is_flag=True, default=False)
@click.option("--yolo_wbf_tta_votes", is_flag=True, default=False)
@click.option("--yolo_all_tuning", is_flag=True, default=False)
def main(
    show,
    yolo_lr,
    yolo_offline,
    yolo_online,
    yolo_grid_all,
    yolo_grid_heat,
    yolo_input_size,
    yolo_diou_heat,
    yolo_wbf_heat,
    yolo_diou_tta_heat,
    yolo_wbf_tta_heat,
    yolo_wbf_tta_votes,
    yolo_all_tuning,
):
    ########################################################################################
    ## YOLO EXPERIMENTS
    ########################################################################################

    ###########################################
    ## LEARNING RATE SEARCH
    ###########################################
    if yolo_lr:
        sns.set_style("whitegrid")
        lrs = [fsci(lr) for lr in (0.01, 0.005, 0.0025, 0.001, 0.0005, 0.00025, 0.0001)]
        maps = (72.352, 71.223, 71.474, 73.415, 71.887, 71.472, 70.650)

        data = pd.DataFrame({"Learning Rate": lrs, "mAP [%]": maps})

        plt.ylim((70, 74))
        ax = sns.barplot(x="Learning Rate", y="mAP [%]", data=data, palette="Blues_d")

        plt.savefig(output / "yolo_lr_experiment.pdf")
        if show:
            plt.show()

    ###########################################
    ## OFFLINE AUG
    ###########################################
    if yolo_offline:
        sns.set_style("whitegrid")
        configs = ("Baseline", "R", "F", "F,R", "P", "P,R", "P,F", "P,F,R")
        maps = (73.415, 87.140, 84.415, 91.113, 79.403, 89.641, 86.129, 92.578)

        both = list(zip(configs, maps))
        by_map = lambda vals: vals[1]
        both = sorted(both, key=by_map)
        configs, maps = [], []
        for c, m in both:
            configs.append(c)
            maps.append(m)

        xlabel, ylabel = "Configuration", "mAP [%]"
        data = pd.DataFrame({xlabel: configs, ylabel: maps})

        min_y, max_y, step = 70, 93, 2
        ax = sns.barplot(x=xlabel, y=ylabel, data=data, palette="Blues_d")

        # ticks
        yticks = np.arange(min_y, max_y, step)
        ax.set_yticks(yticks)
        plt.ylim((min_y, max_y))

        legend = [
            Patch(color="white", label="P: Projection"),
            Patch(color="white", label="F: Horizontal Flip"),
            Patch(color="white", label="R: Rotation"),
            Patch(color="white", label="Baseline: LR = 1e-3"),
        ]
        plt.legend(handles=legend)

        plt.savefig(output / "yolo_offline_aug_experiment.pdf")
        if show:
            plt.show()

    ###########################################
    ## ONLINE AUG
    ###########################################
    if yolo_online:
        augs = ("Rotation", "Scale", "SafeCrop", "ColorJitter")

        rot_map = (95.368, 94.521, 94.198)
        rot_params = ("10°", "20°", "30°")

        scale_map = (93.062, 93.261, 92.935)
        scale_params = ("10%", "20%", "30%")

        crop_map = (94.820, 94.893, 95.027)
        crop_params = ("70%", "80%", "90%")

        color_map = (92.656, 93.243, 93.182)
        # hack to prevent the combination of the same xvalues
        # this is an invisible unicode char
        color_params = ("10%\uFEFF", "20%\uFEFF", "30%\uFEFF")

        baseline_map = (92.578,)
        baseline_params = ("Baseline",)

        xlabel, ylabel = "Parameters", "mAP [%]"
        sns.set(font_scale=2)
        sns.set_style("whitegrid")

        baseline_data = pd.DataFrame(
            {"Augmentation": "Baseline", xlabel: baseline_params, ylabel: baseline_map}
        )
        rot_data = pd.DataFrame(
            {"Augmentation": "Rotation", xlabel: rot_params, ylabel: rot_map}
        )
        scale_data = pd.DataFrame(
            {"Augmentation": "Scale", xlabel: scale_params, ylabel: scale_map}
        )
        crop_data = pd.DataFrame(
            {"Augmentation": "SafeCrop", xlabel: crop_params, ylabel: crop_map}
        )
        color_data = pd.DataFrame(
            {"Augmentation": "ColorJitter", xlabel: color_params, ylabel: color_map}
        )

        data = pd.concat([baseline_data, rot_data, scale_data, crop_data, color_data])
        print(data)

        flare = sns.color_palette("flare", 1)
        blues = 3 * [sns.color_palette("Blues_d", 3)[1]]
        greens = 3 * [sns.color_palette("Greens_d", 3)[1]]
        reds = 3 * [sns.color_palette("Reds_d", 3)[1]]
        greys = 3 * [sns.color_palette("Greys_d", 3)[1]]
        palette = flare + blues + greens + reds + greys

        size = (20, 10)
        fig = plt.figure(figsize=size)
        ax = sns.barplot(x=xlabel, y=ylabel, data=data, palette=palette, dodge=False)

        min_y, max_y = 92, 96
        plt.ylim((min_y, max_y))
        plt.tight_layout()

        legend = [
            Patch(color=flare[0], label="Baseline"),
            Patch(color=blues[0], label="Rotation"),
            Patch(color=greens[0], label="Scale"),
            Patch(color=reds[0], label="Safe Crop"),
            Patch(color=greys[0], label="Color Jitter"),
        ]
        plt.legend(handles=legend)

        plt.savefig(output / "yolo_online_aug_experiment.pdf")
        if show:
            plt.show()

    ####################################################################################
    ## YOLO GRID
    ####################################################################################
    lrs = [fsci(lr) for lr in (0.01, 0.005, 0.0025, 0.001, 0.0005, 0.00025, 0.0001)]
    ciou_32 = (94.124, 94.530, 94.842, 94.350, 93.700, 93.945, 94.011)
    ciou_64 = (95.679, 95.728, 95.885, 95.426, 95.640, 94.992, 95.512)
    eiou_0_32 = (94.258, 94.155, 94.745, 94.494, 94.554, 94.423, 94.672)
    eiou_0_64 = (96.217, 95.889, 95.935, 95.376, 95.355, 95.886, 95.991)
    eiou_05_32 = (93.835, 94.011, 94.312, 94.502, 94.418, 93.798, 94.019)
    eiou_05_64 = (95.424, 95.440, 95.422, 95.637, 95.289, 95.451, 95.435)

    def make_data(lrs, mAPs, bs, loss):
        data = [(loss, bs, lr, mAP) for lr, mAP in zip(lrs, mAPs)]
        return pd.DataFrame(
            data, columns=["Loss", "Batch Size", "Learning Rate", "mAP [%]"]
        )

    dciou_32 = make_data(lrs, ciou_32, 32, "CIoU")
    dciou_64 = make_data(lrs, ciou_64, 64, "CIoU")
    deiou_0_32 = make_data(lrs, eiou_0_32, 32, "EIoU@0")
    deiou_0_64 = make_data(lrs, eiou_0_64, 64, "EIoU@0")
    deiou_05_32 = make_data(lrs, eiou_05_32, 32, "EIoU@0.5")
    deiou_05_64 = make_data(lrs, eiou_05_64, 64, "EIoU@0.5")

    data = pd.concat(
        [dciou_32, dciou_64, deiou_0_32, deiou_0_64, deiou_05_32, deiou_05_64]
    )

    if yolo_grid_all:
        palette = [
            sns.color_palette("Blues_d", 3)[1],
            sns.color_palette("Greens", 3)[1],
        ]

        size = (7, 4)
        fig = plt.figure(figsize=size)
        min_y, max_y = 93, 97
        sns.scatterplot(
            x="Learning Rate", y="mAP [%]", data=data, hue="Batch Size", palette=palette
        )

        plt.savefig(output / "yolo_grid_bs_compare.pdf")
        if show:
            plt.show()

    if yolo_grid_heat:
        results = np.array([ciou_64, eiou_0_64, eiou_05_64])
        yticks = ["CIoU", "EIoU", f"Focal-EIoU\n({gamma}=0.5)"]

        fig = plt.figure(figsize=(7, 3.5))
        ax = sns.heatmap(results, annot=True, fmt=".3f", square=True)
        ax.set_ylabel("Loss Function")
        ax.set_xlabel("Learning Rate")
        ax.set_xticklabels(lrs)
        ax.set_yticklabels(yticks)
        ax.tick_params(axis="y", labelrotation=25)

        plt.tight_layout()
        plt.savefig(output / "yolo_grid_heat.pdf")
        if show:
            plt.show()

    ###########################################
    ## TUNING INPUT SIZE
    ###########################################
    if yolo_input_size:
        sns.set(font_scale=2)
        sns.set_style("whitegrid")

        input_size = (544, 576, 608, 640, 672, 704, 736, 768, 800, 832)
        # test = ( 86.674, 87.695, 88.884, 91.531, 91.871, 92.227, 92.925, 93.506, 92.890, 92.885,)
        # fmt: off
        valid = (92.534, 95.237, 96.370, 96.210, 95.659, 96.541, 97.006, 96.571, 96.359, 95.791)
        # fmt: on

        valid = valid[2:]
        input_size = input_size[2:]
        input_size = [f"{isize}x{isize}" for isize in input_size]

        ylabel, xlabel = "mAP [%]", "Input Size [px x px]"
        data = pd.DataFrame({xlabel: input_size, ylabel: valid})

        min_y, max_y = 95, 97.5

        size = (16, 7)
        fig = plt.figure(figsize=size)
        ax = sns.barplot(x=xlabel, y=ylabel, data=data, palette="Blues_d")
        plt.ylim((min_y, max_y))

        plt.savefig(output / "yolo_input_size_tuning.pdf")
        if show:
            plt.show()

    score_threshs = [f"{val:.2f}" for val in np.arange(0.1, 0.55, 0.05)]
    iou_threshs = [f"{val:.2f}" for val in np.arange(0.1, 0.55, 0.05)]
    if yolo_diou_heat:
        # fmt: off
        # x = score thresh
        # y = iou_thresh
        results = np.array([
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9700638651847839,0.9681911468505859,0.966210663318634,0.9659355282783508,0.9643896222114563,0.9620227813720703],
            [0.9703562259674072,0.9703562259674072,0.969967782497406,0.969967782497406,0.9680961966514587,0.9661168456077576,0.9658427834510803,0.9642968773841858,0.9619309306144714],
            [0.9703463912010193,0.9703463912010193,0.9699578881263733,0.9699578881263733,0.9680914282798767,0.9661144614219666,0.9658427834510803,0.9642968773841858,0.9619309306144714]
        ]) * 100
        # fmt: on
        make_score_tuning_heatmap(results, score_threshs, iou_threshs, size=(11, 11))

        plt.savefig(output / "yolo_diou_heat.pdf")
        if show:
            plt.show()

    if yolo_wbf_heat:
        # fmt: off
        # x = score thresh
        # y = iou_thresh
        results = np.array([
            [0.9697034358978271,0.9718723893165588,0.9712323546409607,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9697034358978271,0.9718723893165588,0.9712323546409607,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9697034358978271,0.9718723893165588,0.9712323546409607,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9697034358978271,0.9718723893165588,0.9712323546409607,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9697034358978271,0.9708917737007141,0.9712323546409607,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9697089791297913,0.9709010720252991,0.9712336659431458,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9697089791297913,0.9709010720252991,0.9712336659431458,0.9717895984649658,0.9707955718040466,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.969697892665863,0.9709005355834961,0.97123783826828,0.9717950224876404,0.9707998633384705,0.9694214463233948,0.9690998196601868,0.9657287001609802,0.9639574885368347],
            [0.9702332019805908,0.9712006449699402,0.9712073802947998,0.9715803265571594,0.9706361293792725,0.9691805839538574,0.9688961505889893,0.9652941823005676,0.96356600522995],
        ]) * 100
        # fmt: on
        make_score_tuning_heatmap(results, score_threshs, iou_threshs, size=(11, 11))

        plt.savefig(output / "yolo_wbf_heat.pdf")
        if show:
            plt.show()

    if yolo_diou_tta_heat:
        # fmt: off
        results = np.array([
            [0.9697441458702087,0.9697441458702087,0.9697441458702087,0.9697441458702087,0.9697441458702087,0.9697441458702087,0.9697441458702087,0.9697441458702087,0.9697441458702087],
            [0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341],
            [0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341],
            [0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341,0.9697427153587341],
            [0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432],
            [0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432],
            [0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432,0.9697363376617432],
            [0.9700061678886414,0.9700061678886414,0.9700061678886414,0.9700061678886414,0.9700061678886414,0.9696640372276306,0.9696640372276306,0.9696640372276306,0.9696640372276306],
            [0.9700602889060974,0.9699594378471375,0.9698143601417542,0.9698143601417542,0.9698143601417542,0.9694721698760986,0.9694721698760986,0.9694721698760986,0.9694721698760986],
        ])
        # fmt: on
        make_score_tuning_heatmap(results, score_threshs, iou_threshs, size=(11, 11))

        plt.savefig(output / "yolo_diou_tta_heat.pdf")
        if show:
            plt.show()

    if yolo_wbf_tta_heat:
        # fmt: off
        # x = score thresh
        # y = iou_thresh
        results = np.array([
            [0.9838979244232178,0.9833899140357971,0.9836897253990173,0.9842371940612793,0.9841075539588928,0.9838888049125671,0.9836196899414062,0.9824966788291931,0.9819128513336182],
            [0.9838979244232178,0.9833899140357971,0.9836897253990173,0.9842371940612793,0.9841075539588928,0.9838888049125671,0.9836196899414062,0.9824966788291931,0.9819128513336182],
            [0.9838977456092834,0.9833879470825195,0.9836878776550293,0.9842371940612793,0.9841063618659973,0.9838888049125671,0.9836196899414062,0.9824966788291931,0.9819128513336182],
            [0.9847074151039124,0.9833979606628418,0.9836926460266113,0.983997642993927,0.9841063618659973,0.9838888049125671,0.9836196899414062,0.9824966788291931,0.9819128513336182],
            [0.9846575856208801,0.9833466410636902,0.9836950302124023,0.9840002655982971,0.9841086268424988,0.9838888049125671,0.9836196899414062,0.9824972748756409,0.9819130897521973],
            [0.9846575856208801,0.9833466410636902,0.9836950302124023,0.9840002655982971,0.9841086268424988,0.9838888049125671,0.9836196899414062,0.9824972748756409,0.9819130897521973],
            [0.9846559166908264,0.9833500385284424,0.9836950302124023,0.9840012192726135,0.9841094613075256,0.9838873744010925,0.9836196899414062,0.9824957847595215,0.9819116592407227],
            [0.9854231476783752,0.9836974143981934,0.984059751033783,0.9840021133422852,0.9841108322143555,0.9838890433311462,0.9836180806159973,0.9824957847595215,0.9819116592407227],
            [0.9852632880210876,0.9834897518157959,0.9843370318412781,0.9838964343070984,0.9839127063751221,0.9830084443092346,0.9826939702033997,0.9814903736114502,0.9808415770530701],
        ]) * 100
        # fmt: on
        make_score_tuning_heatmap(results, score_threshs, iou_threshs, size=(11, 11))

        plt.savefig(output / "yolo_wbf_tta_heat.pdf")
        if show:
            plt.show()

    if yolo_wbf_tta_votes:
        sns.set_style("whitegrid")
        # using iou_thresh = 0.45, score_thresh = 0.1
        vote_thresh = [1, 2, 3, 4, 5, 6, 7, 8]
        # fmt: off
        results = np.array([0.98542315, 0.98542315, 0.9854284, 0.9854284, 0.98466796, 0.98466796, 0.98439574, 0.98188525]) * 100
        # fmt: on

        xlabel, ylabel = "Minimum Votes", "mAP [%]"

        data = pd.DataFrame({xlabel: vote_thresh, ylabel: results})

        min_y, max_y = 98, 98.8

        size = (8, 3)
        fig = plt.figure(figsize=size)
        ax = sns.barplot(x=xlabel, y=ylabel, data=data, palette="Blues_d")
        plt.ylim((min_y, max_y))

        plt.tight_layout()
        plt.savefig(output / "yolo_wbf_tta_votes.pdf")
        if show:
            plt.show()

    if yolo_all_tuning:
        sns.set_style("whitegrid")
        # fmt: off
        types = ["DIoU Untuned, 608x608", "Input Size Tuned", "DIoU Tuned", "WBF Tuned", "WBF-TTA Tuned"]
        valid = [v*100 for v in [0.9637025, 0.97006387, 0.9703562, 0.9718724, 0.9854284]]
        test = [v*100 for v in [0.88883495, 0.92925644, 0.92925644, 0.9318778, 0.95491886]]
        experiments = ["Baseline", "A", "B", "C", "D"]
        # fmt: on

        ylabel, xlabel = "mAP [%]", "Performed Tuning Experiment\n\n"

        n_exps = len(valid)
        dataset_type = n_exps * ["Validation"] + n_exps * ["Test"]
        experiments = 2 * experiments
        maps = valid + test

        data = pd.DataFrame({xlabel: experiments, "Dataset": dataset_type, ylabel: maps})
        palette = [blue, green]

        ax = sns.catplot(
            x=xlabel,
            y=ylabel,
            hue="Dataset",
            kind="bar",
            palette=palette,
            data=data,
            # ax=ax
            aspect=1.5,
            # height=6
            legend=False
        )
        min_y, max_y = 88, 100
        plt.ylim((min_y, max_y))
        plt.legend(loc="upper left")
        # plt.yticks(np.arange(min_y, max_y, 0.5))

        plt.tight_layout()
        plt.savefig(output / "yolo_all_tuning.pdf")
        if show:
            plt.show()



    ########################################################################################
    ## MUNET EXPERIMENTS
    ########################################################################################


if __name__ == "__main__":
    main()


########################################################################################
## ALL DATA
########################################################################################

################################################
## DIoU
################################################
# iou_thresh,score_thresh,mAP@0.5:0.75
# 0.1,0.1,0.9700638651847839
# 0.1,0.15,0.9700638651847839
# 0.1,0.2,0.9700638651847839
# 0.1,0.25,0.9700638651847839
# 0.1,0.3,0.9681911468505859
# 0.1,0.35,0.966210663318634
# 0.1,0.4,0.9659355282783508
# 0.1,0.45,0.9643896222114563
# 0.1,0.5,0.9620227813720703
# 0.15,0.1,0.9700638651847839
# 0.15,0.15,0.9700638651847839
# 0.15,0.2,0.9700638651847839
# 0.15,0.25,0.9700638651847839
# 0.15,0.3,0.9681911468505859
# 0.15,0.35,0.966210663318634
# 0.15,0.4,0.9659355282783508
# 0.15,0.45,0.9643896222114563
# 0.15,0.5,0.9620227813720703
# 0.2,0.1,0.9700638651847839
# 0.2,0.15,0.9700638651847839
# 0.2,0.2,0.9700638651847839
# 0.2,0.25,0.9700638651847839
# 0.2,0.3,0.9681911468505859
# 0.2,0.35,0.966210663318634
# 0.2,0.4,0.9659355282783508
# 0.2,0.45,0.9643896222114563
# 0.2,0.5,0.9620227813720703
# 0.25,0.1,0.9700638651847839
# 0.25,0.15,0.9700638651847839
# 0.25,0.2,0.9700638651847839
# 0.25,0.25,0.9700638651847839
# 0.25,0.3,0.9681911468505859
# 0.25,0.35,0.966210663318634
# 0.25,0.4,0.9659355282783508
# 0.25,0.45,0.9643896222114563
# 0.25,0.5,0.9620227813720703
# 0.3,0.1,0.9700638651847839
# 0.3,0.15,0.9700638651847839
# 0.3,0.2,0.9700638651847839
# 0.3,0.25,0.9700638651847839
# 0.3,0.3,0.9681911468505859
# 0.3,0.35,0.966210663318634
# 0.3,0.4,0.9659355282783508
# 0.3,0.45,0.9643896222114563
# 0.3,0.5,0.9620227813720703
# 0.35,0.1,0.9700638651847839
# 0.35,0.15,0.9700638651847839
# 0.35,0.2,0.9700638651847839
# 0.35,0.25,0.9700638651847839
# 0.35,0.3,0.9681911468505859
# 0.35,0.35,0.966210663318634
# 0.35,0.4,0.9659355282783508
# 0.35,0.45,0.9643896222114563
# 0.35,0.5,0.9620227813720703
# 0.4,0.1,0.9700638651847839
# 0.4,0.15,0.9700638651847839
# 0.4,0.2,0.9700638651847839
# 0.4,0.25,0.9700638651847839
# 0.4,0.3,0.9681911468505859
# 0.4,0.35,0.966210663318634
# 0.4,0.4,0.9659355282783508
# 0.4,0.45,0.9643896222114563
# 0.4,0.5,0.9620227813720703
# 0.45,0.1,0.9703562259674072
# 0.45,0.15,0.9703562259674072
# 0.45,0.2,0.969967782497406
# 0.45,0.25,0.969967782497406
# 0.45,0.3,0.9680961966514587
# 0.45,0.35,0.9661168456077576
# 0.45,0.4,0.9658427834510803
# 0.45,0.45,0.9642968773841858
# 0.45,0.5,0.9619309306144714
# 0.5,0.1,0.9703463912010193
# 0.5,0.15,0.9703463912010193
# 0.5,0.2,0.9699578881263733
# 0.5,0.25,0.9699578881263733
# 0.5,0.3,0.9680914282798767
# 0.5,0.35,0.9661144614219666
# 0.5,0.4,0.9658427834510803
# 0.5,0.45,0.9642968773841858
# 0.5,0.5,0.9619309306144714


################################################
## WBF
################################################
# iou_thresh,score_thresh,mAP@0.5:0.75
# 0.1,0.1,0.9697034358978271
# 0.1,0.15,0.9718723893165588
# 0.1,0.2,0.9712323546409607
# 0.1,0.25,0.9717895984649658
# 0.1,0.3,0.9707955718040466
# 0.1,0.35,0.9694214463233948
# 0.1,0.4,0.9690998196601868
# 0.1,0.45,0.9657287001609802
# 0.1,0.5,0.9639574885368347
# 0.15,0.1,0.9697034358978271
# 0.15,0.15,0.9718723893165588
# 0.15,0.2,0.9712323546409607
# 0.15,0.25,0.9717895984649658
# 0.15,0.3,0.9707955718040466
# 0.15,0.35,0.9694214463233948
# 0.15,0.4,0.9690998196601868
# 0.15,0.45,0.9657287001609802
# 0.15,0.5,0.9639574885368347
# 0.2,0.1,0.9697034358978271
# 0.2,0.15,0.9718723893165588
# 0.2,0.2,0.9712323546409607
# 0.2,0.25,0.9717895984649658
# 0.2,0.3,0.9707955718040466
# 0.2,0.35,0.9694214463233948
# 0.2,0.4,0.9690998196601868
# 0.2,0.45,0.9657287001609802
# 0.2,0.5,0.9639574885368347
# 0.25,0.1,0.9697034358978271
# 0.25,0.15,0.9718723893165588
# 0.25,0.2,0.9712323546409607
# 0.25,0.25,0.9717895984649658
# 0.25,0.3,0.9707955718040466
# 0.25,0.35,0.9694214463233948
# 0.25,0.4,0.9690998196601868
# 0.25,0.45,0.9657287001609802
# 0.25,0.5,0.9639574885368347
# 0.3,0.1,0.9697034358978271
# 0.3,0.15,0.9708917737007141
# 0.3,0.2,0.9712323546409607
# 0.3,0.25,0.9717895984649658
# 0.3,0.3,0.9707955718040466
# 0.3,0.35,0.9694214463233948
# 0.3,0.4,0.9690998196601868
# 0.3,0.45,0.9657287001609802
# 0.3,0.5,0.9639574885368347
# 0.35,0.1,0.9697089791297913
# 0.35,0.15,0.9709010720252991
# 0.35,0.2,0.9712336659431458
# 0.35,0.25,0.9717895984649658
# 0.35,0.3,0.9707955718040466
# 0.35,0.35,0.9694214463233948
# 0.35,0.4,0.9690998196601868
# 0.35,0.45,0.9657287001609802
# 0.35,0.5,0.9639574885368347
# 0.4,0.1,0.9697089791297913
# 0.4,0.15,0.9709010720252991
# 0.4,0.2,0.9712336659431458
# 0.4,0.25,0.9717895984649658
# 0.4,0.3,0.9707955718040466
# 0.4,0.35,0.9694214463233948
# 0.4,0.4,0.9690998196601868
# 0.4,0.45,0.9657287001609802
# 0.4,0.5,0.9639574885368347
# 0.45,0.1,0.969697892665863
# 0.45,0.15,0.9709005355834961
# 0.45,0.2,0.97123783826828
# 0.45,0.25,0.9717950224876404
# 0.45,0.3,0.9707998633384705
# 0.45,0.35,0.9694214463233948
# 0.45,0.4,0.9690998196601868
# 0.45,0.45,0.9657287001609802
# 0.45,0.5,0.9639574885368347
# 0.5,0.1,0.9702332019805908
# 0.5,0.15,0.9712006449699402
# 0.5,0.2,0.9712073802947998
# 0.5,0.25,0.9715803265571594
# 0.5,0.3,0.9706361293792725
# 0.5,0.35,0.9691805839538574
# 0.5,0.4,0.9688961505889893
# 0.5,0.45,0.9652941823005676
# 0.5,0.5,0.96356600522995


################################################
## DIoU + TTA
################################################

# iou_thresh,score_thresh,mAP@0.5:0.75
# 0.1,0.1,0.9697441458702087
# 0.1,0.15,0.9697441458702087
# 0.1,0.2,0.9697441458702087
# 0.1,0.25,0.9697441458702087
# 0.1,0.3,0.9697441458702087
# 0.1,0.35,0.9697441458702087
# 0.1,0.4,0.9697441458702087
# 0.1,0.45,0.9697441458702087
# 0.1,0.5,0.9697441458702087
# 0.15,0.1,0.9697427153587341
# 0.15,0.15,0.9697427153587341
# 0.15,0.2,0.9697427153587341
# 0.15,0.25,0.9697427153587341
# 0.15,0.3,0.9697427153587341
# 0.15,0.35,0.9697427153587341
# 0.15,0.4,0.9697427153587341
# 0.15,0.45,0.9697427153587341
# 0.15,0.5,0.9697427153587341
# 0.2,0.1,0.9697427153587341
# 0.2,0.15,0.9697427153587341
# 0.2,0.2,0.9697427153587341
# 0.2,0.25,0.9697427153587341
# 0.2,0.3,0.9697427153587341
# 0.2,0.35,0.9697427153587341
# 0.2,0.4,0.9697427153587341
# 0.2,0.45,0.9697427153587341
# 0.2,0.5,0.9697427153587341
# 0.25,0.1,0.9697427153587341
# 0.25,0.15,0.9697427153587341
# 0.25,0.2,0.9697427153587341
# 0.25,0.25,0.9697427153587341
# 0.25,0.3,0.9697427153587341
# 0.25,0.35,0.9697427153587341
# 0.25,0.4,0.9697427153587341
# 0.25,0.45,0.9697427153587341
# 0.25,0.5,0.9697427153587341
# 0.3,0.1,0.9697363376617432
# 0.3,0.15,0.9697363376617432
# 0.3,0.2,0.9697363376617432
# 0.3,0.25,0.9697363376617432
# 0.3,0.3,0.9697363376617432
# 0.3,0.35,0.9697363376617432
# 0.3,0.4,0.9697363376617432
# 0.3,0.45,0.9697363376617432
# 0.3,0.5,0.9697363376617432
# 0.35,0.1,0.9697363376617432
# 0.35,0.15,0.9697363376617432
# 0.35,0.2,0.9697363376617432
# 0.35,0.25,0.9697363376617432
# 0.35,0.3,0.9697363376617432
# 0.35,0.35,0.9697363376617432
# 0.35,0.4,0.9697363376617432
# 0.35,0.45,0.9697363376617432
# 0.35,0.5,0.9697363376617432
# 0.4,0.1,0.9697363376617432
# 0.4,0.15,0.9697363376617432
# 0.4,0.2,0.9697363376617432
# 0.4,0.25,0.9697363376617432
# 0.4,0.3,0.9697363376617432
# 0.4,0.35,0.9697363376617432
# 0.4,0.4,0.9697363376617432
# 0.4,0.45,0.9697363376617432
# 0.4,0.5,0.9697363376617432
# 0.45,0.1,0.9700061678886414
# 0.45,0.15,0.9700061678886414
# 0.45,0.2,0.9700061678886414
# 0.45,0.25,0.9700061678886414
# 0.45,0.3,0.9700061678886414
# 0.45,0.35,0.9696640372276306
# 0.45,0.4,0.9696640372276306
# 0.45,0.45,0.9696640372276306
# 0.45,0.5,0.9696640372276306
# 0.5,0.1,0.9700602889060974
# 0.5,0.15,0.9699594378471375
# 0.5,0.2,0.9698143601417542
# 0.5,0.25,0.9698143601417542
# 0.5,0.3,0.9698143601417542
# 0.5,0.35,0.9694721698760986
# 0.5,0.4,0.9694721698760986
# 0.5,0.45,0.9694721698760986
# 0.5,0.5,0.9694721698760986


################################################
## WBF + TTA
################################################
# iou_thresh,score_thresh,mAP@0.5:0.75
# 0.1,0.1,0.9838979244232178
# 0.1,0.15,0.9833899140357971
# 0.1,0.2,0.9836897253990173
# 0.1,0.25,0.9842371940612793
# 0.1,0.3,0.9841075539588928
# 0.1,0.35,0.9838888049125671
# 0.1,0.4,0.9836196899414062
# 0.1,0.45,0.9824966788291931
# 0.1,0.5,0.9819128513336182
# 0.15,0.1,0.9838979244232178
# 0.15,0.15,0.9833899140357971
# 0.15,0.2,0.9836897253990173
# 0.15,0.25,0.9842371940612793
# 0.15,0.3,0.9841075539588928
# 0.15,0.35,0.9838888049125671
# 0.15,0.4,0.9836196899414062
# 0.15,0.45,0.9824966788291931
# 0.15,0.5,0.9819128513336182
# 0.2,0.1,0.9838977456092834
# 0.2,0.15,0.9833879470825195
# 0.2,0.2,0.9836878776550293
# 0.2,0.25,0.9842371940612793
# 0.2,0.3,0.9841063618659973
# 0.2,0.35,0.9838888049125671
# 0.2,0.4,0.9836196899414062
# 0.2,0.45,0.9824966788291931
# 0.2,0.5,0.9819128513336182
# 0.25,0.1,0.9847074151039124
# 0.25,0.15,0.9833979606628418
# 0.25,0.2,0.9836926460266113
# 0.25,0.25,0.983997642993927
# 0.25,0.3,0.9841063618659973
# 0.25,0.35,0.9838888049125671
# 0.25,0.4,0.9836196899414062
# 0.25,0.45,0.9824966788291931
# 0.25,0.5,0.9819128513336182
# 0.3,0.1,0.9846575856208801
# 0.3,0.15,0.9833466410636902
# 0.3,0.2,0.9836950302124023
# 0.3,0.25,0.9840002655982971
# 0.3,0.3,0.9841086268424988
# 0.3,0.35,0.9838888049125671
# 0.3,0.4,0.9836196899414062
# 0.3,0.45,0.9824972748756409
# 0.3,0.5,0.9819130897521973
# 0.35,0.1,0.9846575856208801
# 0.35,0.15,0.9833466410636902
# 0.35,0.2,0.9836950302124023
# 0.35,0.25,0.9840002655982971
# 0.35,0.3,0.9841086268424988
# 0.35,0.35,0.9838888049125671
# 0.35,0.4,0.9836196899414062
# 0.35,0.45,0.9824972748756409
# 0.35,0.5,0.9819130897521973
# 0.4,0.1,0.9846559166908264
# 0.4,0.15,0.9833500385284424
# 0.4,0.2,0.9836950302124023
# 0.4,0.25,0.9840012192726135
# 0.4,0.3,0.9841094613075256
# 0.4,0.35,0.9838873744010925
# 0.4,0.4,0.9836196899414062
# 0.4,0.45,0.9824957847595215
# 0.4,0.5,0.9819116592407227
# 0.45,0.1,0.9854231476783752
# 0.45,0.15,0.9836974143981934
# 0.45,0.2,0.984059751033783
# 0.45,0.25,0.9840021133422852
# 0.45,0.3,0.9841108322143555
# 0.45,0.35,0.9838890433311462
# 0.45,0.4,0.9836180806159973
# 0.45,0.45,0.9824957847595215
# 0.45,0.5,0.9819116592407227
# 0.5,0.1,0.9852632880210876
# 0.5,0.15,0.9834897518157959
# 0.5,0.2,0.9843370318412781
# 0.5,0.25,0.9838964343070984
# 0.5,0.3,0.9839127063751221
# 0.5,0.35,0.9830084443092346
# 0.5,0.4,0.9826939702033997
# 0.5,0.45,0.9814903736114502
# 0.5,0.5,0.9808415770530701

################################################
## WBF + TTA + Neighbors
################################################
# n = 1:
# n = 2:
# n = 3:
# n = 4:
# n = 5:
# n = 6:
# n = 7:
# n = 8:
